name: Daily Tests
on:
  pull_request:
    types: [labeled]
  schedule:
  - cron:  '0 8 * * *'
  repository_dispatch:
    types: [daily_tests]
env:
  GO111MODULE: on

jobs:

  unlabel:
    name: Label taking off
    if: github.event_name == 'pull_request' && github.event.label.name == 'run tests'
    runs-on: ubuntu-latest
    steps:

    - uses: actions/github-script@v1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: "github.issues.removeLabel({...context.issue, name: '${{ github.event.label.name }}' })"

  precompiled_tests_binaries:
    name: Precompiled tests binaries
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Checkout code
      uses: actions/checkout@v2

#    - name: Install upx (ubuntu-latest)
#      run: sudo apt-get install upx
#      if: matrix.os == 'ubuntu-latest'

    # To compress werf_with_coverage binary for macOS
    # This fixes related with monkey patching panic (panic: permission denied [recovered])
    - name: Install upx (macOS-latest)
      run: brew install upx
      if: matrix.os == 'macOS-latest'

#    - name: Install upx (windows-latest)
#      run: |
#        mkdir bin
#        echo $GITHUB_WORKSPACE/bin >> $GITHUB_PATH
#
#        curl -LO https://github.com/upx/upx/releases/download/v3.95/upx-3.95-win64.zip
#        unzip upx-3.95-win64.zip
#        mv upx-3.95-win64/upx.exe bin
#      shell: bash
#      if: matrix.os == 'windows-latest'

    - name: Compile tests binaries
      run: |
        # unit tests binaries
        ./scripts/tests/precompiled_tests_binaries.sh ./cmd ./precompiled_tests_binaries/unit
        ./scripts/tests/precompiled_tests_binaries.sh ./pkg ./precompiled_tests_binaries/unit

        # integration tests binaries
        ./scripts/tests/precompiled_tests_binaries.sh ./integration ./precompiled_tests_binaries/integration

        # integration_k8s tests binaries
        ./scripts/tests/precompiled_tests_binaries.sh ./integration_k8s ./precompiled_tests_binaries/integration_k8s

        # werf with coverage binary
        ./scripts/tests/werf_with_coverage.sh
      shell: bash

    - name: Upload unit tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_unit_tests_binaries"
        path: precompiled_tests_binaries/unit

    - name: Upload integration tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_tests_binaries"
        path: precompiled_tests_binaries/integration

    - name: Upload integration k8s tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_tests_binaries"
        path: precompiled_tests_binaries/integration_k8s

    - name: Upload werf with coverage binary (ubuntu-latest, macOS-latest)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage
      if: matrix.os != 'windows-latest'

    - name: Upload werf with coverage binary (windows-latest)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage.exe
      if: matrix.os == 'windows-latest'

  unit_tests:
    name: Unit tests
    needs: precompiled_tests_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download unit tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_unit_tests_binaries"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        find . -type f \( -name '*.test' -or -name '*.test.exe' \) -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: |
        test_binaries=$(find . -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do
          coverage_file_name="$(openssl rand -hex 6)-$(date +"%H_%M_%S")_coverage.out"
          $test_binary -test.v -test.coverprofile="$WERF_TEST_COVERAGE_DIR"/"$coverage_file_name"
        done
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests_on_self_hosted_runners:
    name: Integration tests
    needs: precompiled_tests_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        extra-find-args:
        - "-name 'git.test*'"
        - "-name 'ansible.test*'"
        - "! -name 'git.test*' ! -name 'ansible.test*'"
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Checkout code
      uses: actions/checkout@v2
      if: matrix.extra-find-args != '! -name ''git.test*'' ! -name ''ansible.test*'''

    - name: Checkout code (git history as fixtures for tests)
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      if: matrix.extra-find-args == '! -name ''git.test*'' ! -name ''ansible.test*'''

    - name: Download integration tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_integration_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        # regular ginkgo CLI (onsi/ginkgo) cannot run pre-compiled test package on windows (https://github.com/onsi/ginkgo/issues/529)
        git clone https://github.com/werf/ginkgo.git fork
        cd fork/ginkgo
        go build .
        mv ginkgo $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE

        chmod +x werf_with_coverage
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do chmod +x $test_binary; done

        export DOCKER_CONFIG=$(mktemp -d)
        echo DOCKER_CONFIG=$DOCKER_CONFIG >> $GITHUB_ENV
      shell: bash

    - name: Test (macOS)
      run: |
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \) ${{ matrix.extra-find-args }})
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -keepGoing $test_binaries
      shell: bash
      if: matrix.os == 'macOS'

    - name: Test (windows)
      run: |
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \) ${{ matrix.extra-find-args }})
        WERF_DISABLE_AUTO_GC=1 WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -keepGoing $test_binaries
      shell: bash
      if: matrix.os == 'windows'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_tests_on_self_hosted_runners:
    name: Integration k8s tests
    needs: precompiled_tests_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        k8s_version: [1.16, 1.17, 1.18, 1.19]
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download integration k8s tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_integration_k8s_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        # regular ginkgo CLI (onsi/ginkgo) cannot run pre-compiled test package on windows (https://github.com/onsi/ginkgo/issues/529)
        git clone https://github.com/werf/ginkgo.git fork
        cd fork/ginkgo
        go build .
        mv ginkgo $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE

        chmod +x werf_with_coverage
        test_binaries=$(find integration_k8s -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do chmod +x $test_binary; done

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV

        export DOCKER_CONFIG=$(mktemp -d)
        echo DOCKER_CONFIG=$DOCKER_CONFIG >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_17: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_17 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_18: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_18 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test (macOS)
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration_k8s -type f \( -name '*.test' -or -name '*.test.exe' \))
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}
      if: matrix.os == 'macOS'

    - name: Test (windows)
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration_k8s -type f \( -name '*.test' -or -name '*.test.exe' \))
        WERF_DISABLE_AUTO_GC=1 WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}
      if: matrix.os == 'windows'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage
