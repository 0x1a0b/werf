#!/usr/bin/env ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'rubygems'
require 'dapp'

Thread.abort_on_exception = true

def get_process_parent_pid(pid)
  path = File.join("/proc", pid.to_s, "status")
  if File.exists? path
    ppid_line = File.read(path).lines.find {|line| line.split("\t").first == "PPid:"}
    ppid = ppid_line.strip.split("\t").last.to_i

    # zero is nil
    ppid if ppid != 0
  end
end

def process_alive?(pid)
  begin
    Process.kill(0, pid)
    true
  rescue ::Errno::EPERM
    true
  rescue ::Errno::ESRCH
    # no such process
    false
  end
end

def get_parents
  pid = Process.pid
  parents = []

  loop do
    ppid = get_process_parent_pid(pid)
    break unless ppid
    parents << ppid
    pid = ppid
  end

  parents
end

def set_gitlab_cancel_handler
  parents_pids = get_parents

  Thread.new do
    loop do
      cancelled = false

      parents_pids.each do |pid|
        if not process_alive? pid
          File.open(File.join(ENV["HOME"], ".dapp", "cancelled"), "a") do |file|
            file.write "#{Process.pid}\n"
          end

          Process.kill("INT", Process.pid)
          cancelled = true
        end
      end

      break if cancelled

      sleep 1
    end
  end
end

set_gitlab_cancel_handler if ENV["GITLAB_CI"]

begin
  begin
    begin
      begin
        Dapp::CLI.new.run
      ensure
        if Time.now.to_date < Date.parse("2019-11-01")
          STDERR.puts
          STDERR.puts ::Paint["###################################################################", :red, :bold]
          STDERR.puts ::Paint["###                   DEPRECATION WARNING!                      ###", :red, :bold]
          STDERR.puts ::Paint["###  Dapp will be deprecated for use starting with 01.11.2019!  ###", :red, :bold]
          STDERR.puts ::Paint["###            Please port your project to werf:                ###", :red, :bold]
          STDERR.puts ::Paint["###                     https://werf.io                         ###", :red, :bold]
          STDERR.puts ::Paint["###################################################################", :red, :bold]
          STDERR.puts
        else
          STDERR.puts
          STDERR.puts ::Paint["######################################################################", :red, :bold]
          STDERR.puts ::Paint["###                     DEPRECATION WARNING!                       ###", :red, :bold]
          STDERR.puts ::Paint["###  Dapp is deprecated for use and will not receive any support!  ###", :red, :bold]
          STDERR.puts ::Paint["###               Please port your project to werf:                ###", :red, :bold]
          STDERR.puts ::Paint["###                       https://werf.io                          ###", :red, :bold]
          STDERR.puts ::Paint["######################################################################", :red, :bold]
          STDERR.puts
        end
      end
    rescue Dapp::Error::Base => e
      unless (message = Dapp::Helper::NetStatus.before_error_message(e)).empty?
        $stderr.puts(message)
      end

      raise
    end
  rescue ::SystemExit then raise
  rescue Errno::EPIPE then nil
  rescue ::Exception => e
    "/tmp/dapp-stacktrace-#{SecureRandom.uuid}.out".tap do |filename|
      ::File.open(filename, 'w') do |dapp_stacktrace|
        dapp_stacktrace.write "#{e.backtrace.join("\n")}\n"
      end
      $stderr.puts "\033[1m\033[90mStacktrace dumped to #{filename}\033[0m"
    end

    if Dapp::CLI.dapp_object
      Dapp::CLI.dapp_object.sentry_exception(e)
    end

    raise
  end
rescue Dapp::Error::Shellout => e
  $stderr.puts(Dapp::Helper::NetStatus.message(e))
  exit 1
rescue Dapp::Error::Base, Dapp::Dapp::Logging::I18n::I18nError => e
  if e.respond_to?(:user?) && e.user?
    $stderr.puts(Dapp::Dapp.paint_string(Dapp::Helper::NetStatus.message(e), :warning))
    exit 1
  else
    raise
  end
rescue Interrupt => _e
  $stderr.puts(Dapp::Dapp.paint_string('Interrupted', :warning))
  exit 1
rescue Errno::EACCES => _e
  $stderr.puts(Dapp::Dapp.paint_string('Permission denied!', :warning))
  exit 1
end
